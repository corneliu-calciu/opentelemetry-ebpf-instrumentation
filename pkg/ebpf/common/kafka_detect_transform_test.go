// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

package ebpfcommon

import (
	"testing"

	"github.com/hashicorp/golang-lru/v2/simplelru"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/obi/pkg/internal/ebpf/kafkaparser"
)

func TestProcessKafkaRequest(t *testing.T) {
	type requestBytes struct {
		request  []byte
		response []byte
	}
	tests := []struct {
		name        string
		request     []byte
		preRequests []requestBytes
		expected    *KafkaInfo
		err         bool
	}{
		{
			name:    "Fetch request (v11)",
			request: []byte{0, 0, 0, 94, 0, 1, 0, 11, 0, 0, 0, 224, 0, 6, 115, 97, 114, 97, 109, 97, 255, 255, 255, 255, 0, 0, 1, 244, 0, 0, 0, 1, 6, 64, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 1, 0, 9, 105, 109, 112, 111, 114, 116, 97, 110, 116, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0},
			expected: &KafkaInfo{
				ClientID:  "sarama",
				Operation: Fetch,
				Topic:     "important",
				PartitionInfo: &PartitionInfo{
					Partition: 0,
					Offset:    19,
				},
			},
		},
		// TODO these tests don't seem like valid kafka packets, check that
		//{
		//	name:  "Fetch request (v12)",
		//	request: []byte{0, 0, 0, 52, 0, 1, 0, 12, 0, 0, 1, 3, 0, 12, 99, 111, 110, 115, 117, 109, 101, 114, 45, 49, 45, 49, 0, 255, 255, 255, 255, 0, 0, 1, 244, 0, 0, 0, 1, 3, 32, 0, 0, 0, 30, 37, 158, 231, 0, 0, 0, 156, 1, 1, 1, 0, 53, 99, 48, 57, 45, 52, 52, 48, 48, 45, 98, 54, 101, 101, 45, 56, 54, 102, 97, 102, 101, 102, 57, 52, 102, 101, 98, 0, 2, 9, 109, 121, 45, 116, 111, 112, 105, 99, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 1, 0, 0, 0, 101, 121, 12, 118, 97, 108, 117, 101, 51, 0, 30, 0, 0},
		//	expected: &KafkaInfo{
		//		ClientID:  "consumer-1-1",
		//		Operation: Fetch,
		//		Topic:     "my-topic",
		//	},
		// },
		//{
		//	name:  "Fetch request (v15)",
		//	request: []byte{0, 0, 0, 68, 0, 1, 0, 15, 0, 0, 38, 94, 0, 32, 99, 111, 110, 115, 117, 109, 101, 114, 45, 102, 114, 97, 117, 100, 100, 101, 116, 101, 99, 116, 105, 111, 110, 115, 101, 114, 118, 105, 99, 101, 45, 49, 0, 0, 0, 1, 244, 0, 0, 0, 1, 3, 32, 0, 0, 0, 33, 62, 224, 94, 0, 0, 30, 44, 2, 1, 1, 0, 1, 70, 99, 111, 110, 115, 117, 109, 101, 114, 45, 102, 114, 97, 117, 100, 100, 101, 116, 101, 99, 116, 105, 111, 110, 115, 101, 114, 118, 105, 99, 101, 45, 49, 45, 50, 51, 48, 98, 51, 55, 101, 100, 45, 98, 101, 57, 102, 45, 52, 97, 53, 99, 45, 97, 52},
		//	expected: &KafkaInfo{
		//		ClientID:    "consumer-frauddetectionservice-1",
		//		Operation:   Fetch,
		//		Topic:       "*",
		//	},
		// },
		{
			name: "Fetch request (v17) without metadata",
			request: []byte{
				0, 0, 0, 80, 0, 1, 0, 17, 0, 0, 0, 179, 0, 26,
				99, 111, 110, 115, 117, 109, 101, 114, 45, 102, 114, 97, 117, 100, 45, 100,
				101, 116, 101, 99, 116, 105, 111, 110, 45, 49,
				0, 0, 0, 1, 244, 0, 0, 0, 1, 3, 32, 0, 0, 0,
				35, 105, 175, 157, 0, 0, 0, 134, 2,
				// UUID
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
				// 0 partitions
				1,
			},
			expected: &KafkaInfo{
				ClientID:  "consumer-fraud-detection-1",
				Operation: Fetch,
				Topic:     "*",
			},
		},
		{
			name: "Fetch request (v17) with metadata",
			preRequests: []requestBytes{
				{
					request: []byte{
						/*
							type KafkaRequestHeader struct {
								MessageSize   int32
								APIKey        KafkaAPIKey
								APIVersion    int16
								CorrelationID int32
								ClientID      string
							}
						*/
						0, 0, 0, 80, 0, 3, 0, 12, 2, 0, 0, 0, 0, 0,
					},
					response: []byte{
						// Header
						0, 0, 0, 80, 2, 0, 0, 0, 0,
						0, 0, 0, 0, 3, 0, 0, 0, 1, 10, 108, 111, 99, 97, 108, 104, 111, 115, 116, 0, 0, 35, 132, 0, 0, 0, 0, 0, 2, 10, 108, 111, 99, 97, 108, 104,
						111, 115, 116, 0, 0, 35, 133, 6, 114, 97, 99, 107, 49, 0, 0, 0, 0, 0, 1, 3, 0, 0, 7, 116, 111, 112, 105, 99, 49,
						// Topic UUID
						1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
						0, 0, 0, 0,
						0, 0, 0, 7, 116, 111, 112, 105, 99, 50, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0,
					},
				},
			},
			request: []byte{
				0, 0, 0, 80, 0, 1, 0, 17, 0, 0, 0, 179, 0, 26,
				99, 111, 110, 115, 117, 109, 101, 114, 45, 102, 114, 97, 117, 100, 45, 100,
				101, 116, 101, 99, 116, 105, 111, 110, 45, 49,
				0, 0, 0, 1, 244, 0, 0, 0, 1, 3, 32, 0, 0, 0,
				35, 105, 175, 157, 0, 0, 0, 134, 2,
				// UUID
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
				// 0 partitions
				1,
			},
			expected: &KafkaInfo{
				ClientID:  "consumer-fraud-detection-1",
				Operation: Fetch,
				Topic:     "topic1",
			},
		},
		{
			name:    "Produce request (v7)",
			request: []byte{0, 0, 0, 123, 0, 0, 0, 7, 0, 0, 0, 2, 0, 6, 115, 97, 114, 97, 109, 97, 255, 255, 255, 255, 0, 0, 39, 16, 0, 0, 0, 1, 0, 9, 105, 109, 112, 111, 114, 116, 97, 110, 116, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 2, 249, 236, 167, 144, 0, 0, 0, 0, 0, 0, 0, 0, 1, 143, 191, 130, 165, 117, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 1, 20, 0, 0, 0, 1, 8, 100, 97, 116, 97, 0},
			expected: &KafkaInfo{
				ClientID:  "sarama",
				Operation: Produce,
				Topic:     "important",
				PartitionInfo: &PartitionInfo{
					Partition: 0,
				},
			},
		},
		{
			name:    "Produce request (v9)",
			request: []byte{0, 0, 0, 124, 0, 0, 0, 9, 0, 0, 0, 8, 0, 10, 112, 114, 111, 100, 117, 99, 101, 114, 45, 49, 0, 0, 0, 1, 0, 0, 117, 48, 2, 9, 109, 121, 45, 116, 111, 112, 105, 99, 2, 0, 0, 0, 0, 78, 103, 0, 0, 0, 1, 2, 0, 0, 9, 109, 121, 45, 116, 111, 112, 105, 99, 193, 136, 51, 44, 67, 57, 71, 124, 178, 93, 33, 21, 191, 31, 138, 233, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0, 0, 0, 1, 1, 0, 128, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 16, 0, 0, 0, 4, 0, 0, 17},
			expected: &KafkaInfo{
				ClientID:  "producer-1",
				Operation: Produce,
				Topic:     "my-topic",
				PartitionInfo: &PartitionInfo{
					Partition: 0,
				},
			},
		},
		{
			name:    "Invalid request",
			request: []byte{0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 2, 0, 6, 115, 97, 114, 97, 109, 97, 255, 255, 255, 255, 0, 0, 39, 16, 0, 0, 0, 1, 0, 9, 105, 109, 112, 111, 114, 116, 97, 110, 116, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 72},
			err:     true,
		},
		{
			name:    "Redis request",
			request: []byte{42, 51, 13, 10, 36, 52, 13, 10, 72, 71, 69, 84, 13, 10, 36, 51, 54, 13, 10, 56, 97, 100, 48, 101, 56, 99, 97, 45, 101, 97, 49, 57, 45, 52, 50, 97, 57, 45, 98, 51, 55, 48, 45, 98, 99, 97, 102, 102, 50, 55, 54, 55, 98, 56, 54, 13, 10, 36, 52, 13, 10, 99, 97, 114, 116, 13, 10, 103, 58, 32, 34, 51, 49, 117, 50, 107, 97, 100, 98, 108, 113, 53, 106, 34, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 108, 101, 110, 103, 116, 104, 58, 32, 49, 57, 57, 13, 10, 118, 97, 114, 121, 58, 32, 65, 99, 99, 101, 112, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 13, 10, 100, 97, 116, 101, 58, 32, 87, 101, 100, 44, 32, 48, 51, 32, 74, 117, 108, 32, 50, 48, 50, 52, 32, 49, 55, 58, 52, 54, 58, 49, 55, 32, 71, 77, 84, 13, 10, 120, 45, 101, 110, 118, 111, 121, 45, 117, 112, 115, 116, 114, 101, 97, 109, 45, 115, 101, 114, 118, 105, 99, 101, 45, 116, 105, 109, 101, 58, 32, 51, 13, 10, 115, 101, 114, 118, 101, 114, 58, 32, 101, 110, 118, 111, 121, 13, 10, 13, 10, 91, 34, 90, 65, 82, 34, 44, 34, 73, 83, 75, 34, 44, 34, 73, 76, 83, 34, 44, 34, 82, 79, 78, 34, 44, 34, 71, 66, 80, 34, 44, 34, 66, 82, 76, 34, 44, 34},
			err:     true,
		},
		{
			name:    "Redis request 2",
			request: []byte{36, 45, 49, 13, 10, 1, 0, 15, 0, 3, 89, 130, 0, 32, 99, 111, 110, 115, 117, 109, 101, 114, 45, 102, 114, 97, 117, 100, 100, 101, 116, 101, 99, 116, 105, 111, 110, 115, 101, 114, 118, 105, 99, 101, 45, 49, 0, 0, 0, 1, 244, 0, 0, 0, 1, 3, 32, 0, 0, 0, 17, 170, 173, 222, 0, 0, 141, 2, 1, 1, 1, 0, 101, 112, 116, 45, 114, 97, 110, 103, 101, 115, 58, 32, 98, 121, 116, 101, 115, 13, 10, 108, 97, 115, 116, 45, 109, 111, 100, 105, 102, 105, 101, 100, 58, 32, 70, 114, 105, 44, 32, 48, 55, 32, 74, 117, 110, 32, 50, 48, 50, 52, 32, 48, 48, 58, 53, 55}[:5],
			err:     true,
		},
		{
			name:    "Redis request 2, mixed up data",
			request: []byte{36, 45, 49, 13, 10, 1, 0, 15, 0, 3, 89, 130, 0, 32, 99, 111, 110, 115, 117, 109, 101, 114, 45, 102, 114, 97, 117, 100, 100, 101, 116, 101, 99, 116, 105, 111, 110, 115, 101, 114, 118, 105, 99, 101, 45, 49, 0, 0, 0, 1, 244, 0, 0, 0, 1, 3, 32, 0, 0, 0, 17, 170, 173, 222, 0, 0, 141, 2, 1, 1, 1, 0, 101, 112, 116, 45, 114, 97, 110, 103, 101, 115, 58, 32, 98, 121, 116, 101, 115, 13, 10, 108, 97, 115, 116, 45, 109, 111, 100, 105, 102, 105, 101, 100, 58, 32, 70, 114, 105, 44, 32, 48, 55, 32, 74, 117, 110, 32, 50, 48, 50, 52, 32, 48, 48, 58, 53, 55}[:20],
			err:     true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cache, _ := simplelru.NewLRU[kafkaparser.UUID, string](1000, nil)
			if len(tt.preRequests) > 0 {
				for _, preInput := range tt.preRequests {
					_, ignore, err := ProcessKafkaEvent(preInput.request, preInput.response, cache)
					require.NoError(t, err)
					require.True(t, ignore)
				}
			}
			res, _, err := ProcessKafkaEvent(tt.request, nil, cache)
			if tt.err {
				assert.Error(t, err)
				return
			}
			assert.Equal(t, tt.expected, res)
		})
	}
}

apiVersion: v1
kind: ConfigMap
metadata:
  name: obi-config
data:
  obi-config.yml: |
    prometheus_export:
      port: 8999
      features:
        - application
        - network
        - application_process
        - application_span
        - application_service_graph
    attributes:
      kubernetes:
        enable: true
        cluster_name: my-kube
        meta_cache_address: k8s-cache:50055
        resource_labels:
          deployment.environment: ["${DEPLOYMENT_ENVIRONMENT:-deployment.environment}"]
      select:
        "*":
          include: [ "*" ]
        obi.network.flow.bytes:
          include: [ "*" ]
          exclude: [ "src_port" ]
    network:
      protocols:
        - TCP
      cidrs:
        # default subnets of Kind Pods and services
        - 10.244.0.0/16
        - fd00:10:244::/56
        - 10.96.0.0/16
        - fd00:10:96::/112
    trace_printer: text
    log_level: debug
    discovery:
      instrument:
        - k8s_deployment_name: "{otherinstance,testserver}"
        - k8s_pod_name: "*pinger*"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: obi
spec:
  selector:
    matchLabels:
      instrumentation: obi
  template:
    metadata:
      labels:
        instrumentation: obi
        # this label will trigger a deletion of OBI pods before tearing down
        # kind, to force OBI writing the coverage data
        teardown: delete
    spec:
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      # we still need this for reading the HOST ID from the Kube Node
      serviceAccountName: obi
      volumes:
        - name: obi-config
          configMap:
            name: obi-config
        - name: testoutput
          persistentVolumeClaim:
            claimName: testoutput
      containers:
        - name: obi
          image: obi:dev
          imagePullPolicy: Never # loaded into Kind from localhost
          args: [ "--config=/config/obi-config.yml" ]
          securityContext:
            privileged: true
            runAsUser: 0
          volumeMounts:
            - mountPath: /config
              name: obi-config
            - mountPath: /testoutput
              name: testoutput
          env:
            - name: GOCOVERDIR
              value: "/testoutput"
            - name: OTEL_EBPF_DISCOVERY_POLL_INTERVAL
              value: "500ms"
            - name: OTEL_EBPF_METRICS_INTERVAL
              value: "10ms"
            - name: OTEL_EBPF_BPF_BATCH_TIMEOUT
              value: "10ms"
          ports:
            - containerPort: 8999
              name: prometheus
              protocol: TCP
---
kind: Service
apiVersion: v1
metadata:
  name: obi-promscrape
spec:
  selector:
    instrumentation: obi
  ports:
    - port: 8999
      name: prometheus
      protocol: TCP
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: k8s-cache
  namespace: default
  labels:
    app: k8s-cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-cache
  template:
    metadata:
      name: k8s-cache
      labels:
        app: k8s-cache
        # this label will trigger a deletion of OBI pods before tearing down
        # kind, to force OBI writing the coverage data
        teardown: delete
    spec:
      # required to let the service accessing the K8s API
      serviceAccountName: obi
      volumes:
        - name: testoutput
          persistentVolumeClaim:
            claimName: testoutput
      containers:
        - name: k8s-cache
          image: obi-k8s-cache:dev
          imagePullPolicy: Never # loaded into Kind from localhost
          env:
            - name: OTEL_EBPF_K8S_CACHE_PORT
              value: "50055"
            - name: OTEL_EBPF_K8S_CACHE_INTERNAL_METRICS_PROMETHEUS_PORT
              value: "8999"
            - name: GOCOVERDIR
              value: "/testoutput"
          volumeMounts:
            - mountPath: /testoutput
              name: testoutput
          ports:
            - containerPort: 50055
              name: grpc
            - containerPort: 8999
              name: internalprom
---
kind: Service
apiVersion: v1
metadata:
  name: k8s-cache
  namespace: default
spec:
  selector:
    app: k8s-cache
  ports:
    - port: 50055
      name: grpc
      protocol: TCP
    - name: internalprom
      port: 8999
      protocol: TCP
